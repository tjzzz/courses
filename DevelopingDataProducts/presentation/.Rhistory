now=grep('本届世界杯数据',web)
tt=web[start+9]
tt
loc=regexpr('<th>\\w+</th>',tt)
start=loc[1]
len=attr(loc,"match.length")
len
start
tt
substr(tt,start+4,start+len-5)
substr(tt,start+4,start+len-6)
now=grep('本届世界杯数据',web)
tt=web[now+9,now+94]
tt=web[now+9:now+94]
tt
tt[1]
length(tt)
tt[2]
now=grep('本届世界杯数据',web)
now
tt=web[(now+9):(now+94)]
tt
loc=regexpr('>\\w+<',tt)
loc[1]
loc=grep('>\\w+<',tt)
tt[loc]
library(XML)
url<-'http://worldcup.2014.163.com/match/report/1263087.html'
web <- readLines(url,encoding="UTF-8")
now=grep('本届世界杯数据',web)
now
tt=web[(now+9):(now+94)]
tt[86]
tt[85]
tt=web[(now+9):(now+94)]
#用regexpr匹配位置，然后substr替换
loc=grep('>\\w+<',tt)
start=loc[1]
len=attr(loc,"match.length")
tt=substr(tt,start+4,start+len-6)
loc=regexpr('>\\w+<',tt)
loc
tt[1]
substr(tt[1],40,44
)
substr(tt[4],-1,44)
loc=gregexpr('>\\w+<',tt)
loc
loc=grep('>\\w+<',tt,value=TRUE)
loc
tt=web[(now+9):(now+94)]
loc=grep('>\\w+<',tt,value=TRUE)
loc
loc=grep('>\\S<',tt,value=TRUE)
loc=grep('>\\S+<',tt,value=TRUE)
loc
math=grep('>\\S+<',tt,value=TRUE)   #\S非空白字符
math=regexpr('>\\S+<',tt,value=TRUE)   #\S非空白字符
math=regexpr('>\\S+<',tt)   #\S非空白字符
math=grep('>\\S+<',tt,value=TRUE)   #\S非空白字符
math
loc=regexpr('>\\S+<',math)
loc
substr(math,44,44+attr(math,"match.length")-1)
substr(math,44,48)
substr(math,40,48)
substr(math,41,48)
attr(math,"match.length")
math
loc
substr(math,41,41+attr(loc,"match.length")-1)
substr(math,41,38+attr(loc,"match.length"))
dat=substr(math,41,38+attr(loc,"match.length"))
dat
matrix(dat,ncol=3)
matrix(dat,nrow=3)
t(matrix(dat,nrow=3))
dat_out=t(matrix(dat,nrow=3))
write.table(dat_out,file="out.txt")
getwd()
86+49
url0='worldcup.2014.163.com/schedule/calendar/'
web=readLines(url0,encoding="UTF-8")
url0='http://worldcup.2014.163.com/schedule/calendar/'
web=readLines(url0,encoding="UTF-8")
url0='http://worldcup.2014.163.com/schedule/calendar/'
web=readLines(url0,encoding="UTF-8")
grep(pattern,web)
pattern='<a href="/match/report'
grep(pattern,web)
index=grep(pattern,web)
web[index]
math=grep('\"\\S+\">',web[index],value=TRUE)   #\S非空白字符
math
loc=regexpr('\"\\S+\">',web[index],value=TRUE)   #\S非空白字符
loc=regexpr('\"\\S+\">',web[index])   #\S非空白字符
loc
dat=substr(math,28,28+attr(loc,"match.length"))
dat
dat=substr(math,30,26+attr(loc,"match.length"))
substr(math,30,26+attr(loc,"match.length"))
loc[1]
loc[2]
loc[40]
loc[60]
loc
substr(math,as.numeric(loc),26+attr(loc,"match.length"))
start=as.numeric(loc)
substr(math,start,start+attr(loc,"match.length"))
substr(math,start+2,start+attr(loc,"match.length")-4)
substr(math,start+2,start+attr(loc,"match.length")-3)
www=substr(math,start+2,start+attr(loc,"match.length")-3)
www=pasto('http://worldcup.2014.163.com/',www)
www=paste0('http://worldcup.2014.163.com/',www)
www
i=1
url<-www[i]
web <- readLines(url,encoding="UTF-8")
now=grep('本届世界杯数据',web)
now
math=grep('>\\S+<',tt,value=TRUE)   #\S非空白字符
tt=web[(now+9):(now+94)]
math=grep('>\\S+<',tt,value=TRUE)   #\S非空白字符
loc=regexpr('>\\S+<',math)
dat=substr(math,41,38+attr(loc,"match.length"))
dat
seq(5,50,3)
xx=dat[seq(5,50,3)]
XX
xx
AX=dat[seq(4,49,3)]
AX
rrr=strsplit(xx[3],"/") ##list
rrr
rrr[1]
rrr[[1]]
rrr[[1]][1]
rrr[[1]][2]
teamA=dat[1]
teamB=dat[3]
xx=dat[seq(5,50,3)]
AX=dat[seq(4,49,3)]
BX=dat[seq(6,51,3)]
out=data.frame(teamA,teamB,as.numeric(Ax),as.numeric(Bx))
XX=dat[seq(5,50,3)]
AX=dat[seq(4,49,3)]
BX=dat[seq(6,51,3)]
out=data.frame(teamA,teamB,as.numeric(AX),as.numeric(BX))
write.table(out,file="out.txt",append=TRUE)
out
out=data.frame(A=teamA,B=teamB,as.numeric(t(AX),as.numeric(t(BX))
)
)
out=data.frame(A=teamA,B=teamB,as.numeric(t(AX)),as.numeric(t(BX)))
out
AX
?rnorm
help.search("rnorm")
help("rnorm")
args("rnorm")
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
install.packages("devtools")
find.packages("devtools")
find.package("devtools")
1
1L
attributes(url)
attributes(web)
attributes(1)
vector("logical",3)
c("a",TRUE)
x<-4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
b=rbind(x, y)
class(b)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x=1:4
x
y=2:3
x+y
file="C:\Users\Administrator\Desktop\Data science\2\rprog-data-quiz1_data\hw1_data"
dat=read.csv(file,header=TRUE)
file="C:\\Users\\Administrator\\Desktop\\Data science\\2\\rprog-data-quiz1_data\\hw1_data"
dat=read.csv(file,header=TRUE)
file="C:\\Users\\Administrator\\Desktop\\Data science\\2\\rprog-data-quiz1_data\\hw1_data.csv"
dat=read.csv(file,header=TRUE)
colnames(dat)
dat[c(1,2),]
nrow(dat)
dat[c(152,153),]
dat[47,'Qzone']
dat[47,"Qzone"]
dat[,"Qzone"]
dat$Qzone[47]
[47]
dat$Qzone
names(dat)
dat$Ozone[47]
is.na(dat$Ozone)
sum(is.na(dat$Ozone))
a=c(1,2,3,NA)
mean(a)
index=is.na(dat$Ozone)
b=dat$Ozone[!index]
b
length(b)
mean(b)
ind1=dat$Ozone>31
ind2=dat$Temp>90
rrrr=(dat$Ozone>31 & dat$Temp>90)
rrr
rrrr
sum(rrrr)
a=matrix(1:6,2,3)
a
(a[,1<3] & a[,3]>7)
(a[,1]<3 & a[,3]>7)
(a[,1]<3 && a[,3]>7)
(a[,1]<3 & a[,3]>5)
(a[,1]<2 & a[,3]>5)
a
(a[,1]<2 && a[,3]>5)
(a[,1]<3 && a[,3]>5)
ind1=(dat$Ozone>31 & dat$Temp>90)
mean(dat$Solar.R[ind1])
dat$Solar.R[ind1]
ind1
ind1=(dat$Ozone>31 & dat$Temp>90)
mean(dat$Solar.R[ind1])
bb=bb[!is.na(bb)]
bb=dat$Solar.R[ind1]
bb=bb[!is.na(bb)]
mean(bb)
ind1=(dat$Ozone>31 & dat$Temp>90)
bb=dat$Solar.R[ind1]
mean(bb)
mean(bb,na.rm=T)
mean(dat$Temp[ind2],na.rm=T)
ind2=(dat$Month==6)
mean(dat$Temp[ind2],na.rm=T)
ind3=(dat$Month==5)
max(dat$Ozone[ind3])
max(dat$Ozone[ind3],na.rm=T)
install.packages("swirl")
install.packages("swirl")
library(swirl)
ls()
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z * 2 + 100
my_sqrt=sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div=z/my_sqrt
my_div<-z/my_sqrt
my_div
bye()
swirl()
install.packages("KernSmooth")
library(KernSmooth)
library(KernSmooth)
install.packages("xtable")
library(lattice)
require(stats)
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
dotplot(variety ~ yield | year * site, data=barley)
library(lattice)
llibrary(datasets)
library(datasets)
xyplot(Ozone~Wind,data=airquality)
head(airquality)
str(airquality)
airquality<-tansform(airquality,month=as.factor(month))
airquality<-transform(airquality,month=as.factor(month))
airquality<-transform(airquality,month=as.factor(month))
airquality<-transform(airquality,Month=as.factor(Month))
airquality<-transform(airquality,Month=as.factor(Month))
str(airquality)
xyplot(Ozone~Wind|Month,data=airquality)
xyplot(Ozone~Wind|Month,data=airquality,layout=c(1,5))
xyplot(Ozone~Wind|Month,data=airquality,layout=c(5,1))
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
library(httr)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2<-GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("username", "password"))
pg2
pg2<-GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user", "passwd"))
pg2
str(pg2)
[c(3,5,7)]
q=1:10
q[c(3,5,7)]
109+214+309+160.5+137.5
930+150
library(manipulate)
myhist<-function(mu){
hist(galton$child,cl="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse=mean((galton$child-mu)^2)
text(63,140,paste("Imbalance = ",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(62,74,step=0.5))
library(datasets)
data(galton)
data(galton)
?galton
??galton
data(iris)
str(iris)
datasets()
data()
mean(iris$Sepal.Length)
library(manipulate)
myhist<-function(mu){
hist(iris$Sepal.Length,cl="blue",breaks=30)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse=mean((iris$Sepal.Length-mu)^2)
text(63,140,paste("Imbalance = ",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(5,6,step=0.1))
library(manipulate)
myhist<-function(mu){
hist(iris$Sepal.Length,cl="blue",breaks=30)
lines(c(mu,mu),c(0,10),col="red",lwd=5)
mse=mean((iris$Sepal.Length-mu)^2)
text(6,10,paste("Imbalance = ",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(5,6,step=0.1))
library(manipulate)
myhist<-function(mu){
hist(iris$Sepal.Length,cl="blue",breaks=30)
#lines(c(mu,mu),c(0,10),col="red",lwd=5)
mse=mean((iris$Sepal.Length-mu)^2)
text(6,10,paste("Imbalance = ",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(5,6,step=0.1))
# C6
# C6 Week1 学习笔记
library(manipulate)
myhist<-function(mu){
hist(iris$Sepal.Length,cl="blue",breaks=30)
lines(c(mu,mu),c(0,10),col="red",lwd=5)
mse=mean((iris$Sepal.Length-mu)^2)
text(6,10,paste("Imbalance = ",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(5,6,step=0.1))
library(manipulate)
pvals<-seq(0.01,0.99,length=1000)
manipulate(
plot(pvals,dbeta(pvals,alpha,beta,type="l",frame=F),
alpha=slider(0.01,10,initial=1,step=0.5),
beta=slider(0.01,10,initial=1,step=0.5)
)
\
library(manipulate)
pvals<-seq(0.01,0.99,length=1000)
manipulate(
plot(pvals,dbeta(pvals,alpha,beta),type="l",frame=F),
alpha=slider(0.01,10,initial=1,step=0.5),
beta=slider(0.01,10,initial=1,step=0.5)
)
#explore the beta density
library(manipulate)
pvals<-seq(0.01,0.99,length=1000)
manipulate(
plot(pvals,dbeta(pvals,alpha,beta),type="l",frame=F),
alpha=slider(0.01,10,initial=1,step=0.5),
beta=slider(0.01,10,initial=2,step=0.5)
)
library(manipulate)
pvals<-seq(0.01,0.99,length=1000)
manipulate(
plot(pvals,dbeta(pvals,alpha,beta),type="l",frame=F),
alpha=slider(0.01,10,initial=2,step=0.5),
beta=slider(0.01,10,initial=2,step=0.5)
)
pvals<-seq(0.01,0.99,length=1000)
manipulate(
plot(pvals,dbeta(pvals,alpha,beta),type="l"),
alpha=slider(0.01,10,initial=2,step=0.5),
beta=slider(0.01,10,initial=2,step=0.5)
)
manipulate(
plot(pvals,dbeta(pvals,alpha,beta),type="l",frame=F),
alpha=slider(0.01,10,initial=0.5,step=0.5),
beta=slider(0.01,10,initial=2,step=0.5)
)
library(manipulate)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(galton)
str(galton)
y<-galton$child-mean(galton$child)
x<-galton$parent-mean(galton$parent)
table(x,y)
freqdata<-as.data.frame(table(x,y))
head(freqdata)
y<-galton$child-mean(galton$child)
x<-galton$parent-mean(galton$parent)
freqdata<-as.data.frame(table(x,y))
names(freqdata)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqdata$parent)),
as.numeric(as.vector(freqdata$child)),
pch=21,col="black",bg="lightblue",
cex=0.1*freqdata$freq,   #this command sets the size of the point
xlab="parent",ylab="child"
)
plot(
as.numeric(as.vector(freqdata$parent)),
as.numeric(as.vector(freqdata$child)),
pch=21,col="black",bg="lightblue",
cex=freqdata$freq,   #this command sets the size of the point
xlab="parent",ylab="child"
)
cex=0.2*freqdata$freq,   #this command sets the size of the point
plot(
as.numeric(as.vector(freqdata$parent)),
as.numeric(as.vector(freqdata$child)),
pch=21,col="black",bg="lightblue",
cex=0.2*freqdata$freq,   #this command sets the size of the point
xlab="parent",ylab="child"
)
plot(
as.numeric(as.vector(freqdata$parent)),
as.numeric(as.vector(freqdata$child)),
pch=21,col="black",bg="lightblue",
cex=0.1*freqdata$freq,   #this command sets the size of the point
xlab="parent",ylab="child"
)
## basic notation
qnorm(0.95)
dpois(4,3)
ppois(4,3)
ppois(10,15)
ppois(15,15)
ppois(100,15)
p=c(.1,.2,.3,.4)
p
x=2:5
x^2*p
sum(x^2*p)-sum(x*p)^2
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
y<-(x-mean(x))/sd(x)
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
mean(y)
mean(x)
x=x-mean(x)
y=y-mean(y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
79.5*2+54.5*2+409.5+520.5+214+277+504.5+214+61
A = diag(4) + 1
A.eigen = eigen(A, symmetric = T)
A.eigen
library(rjava)
library(rJava)
require(devtools)
require(devtools)
library(rCharts)
install.packages("rCharts")
library(slidify)
setwd('F:/05Course/Data science/9.Data Products/')
author("first_project")   # 创建project名字
slidify("index.Rmd")
# week2 学习笔记
library(caret)
install.packages("caret")
library(caret)
library(kernlab)
intrain<-createDataPartition(y=spam$type,p=0.75,list=F)
library(kernlab)
data(spam)
intrain<-createDataPartition(y=spam$type,p=0.75,list=F)
training<-spam[intrain,]
testing<-spam[-intrain,]
dim(training)
